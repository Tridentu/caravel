#!/usr/bin/env python3
from prompt_toolkit import prompt
from prompt_toolkit.formatted_text import HTML
import cmd2
import sqlite3

class CaravelOperator(cmd2.Cmd):
  """ Program used for managing package repositories. """
  add_package_parser = cmd2.Cmd2ArgumentParser()
  add_package_parser.add_argument("-v",'--verbose', action="store_true", help="Verbose output")

  def __init__(self):
      shortcuts = cmd2.DEFAULT_SHORTCUTS
      shortcuts.update({'+': "add_package"})
      super().__init__(shortcuts=shortcuts)
      self.db_path = "./"
      self.add_settable(cmd2.Settable("db_path",str,"The diretory/path to look for the repo manifest (pman.caraveldb) in.",self))
      self.prompt = "Caravel Operator>"

  def do_open(self,args):
    self.db = sqlite3.connect(self.db_path + "pman.caraveldb")
  
  @cmd2.with_category("Repository Management")
  @cmd2.with_argparser(add_package_parser)
  def do_add_package(self,args):
       """Adds a package to the repository manifest"""
       def types_toolbar():
            return HTML('<style bg="ansired">binaries</style>, <style bg="ansigreen">configs</style>, <style bg="ansiblue">assets</style> or <style bg="ansiyellow">sources</style>')
       self.pkg_params = {}
       self.pkg_params['name'] = prompt("Name of the package:")
       self.pkg_params['category'] = prompt("Package category:")
       self.pkg_params['pkgType'] = prompt("Package Type:",  bottom_toolbar=types_toolbar)
       self.pkg_params['pkgDesc'] = prompt("Package Description")
       self.verbose = args.verbose
       with self.db:
          try:
            self.records = self.db.execute("select * from packageinfo")
          except Exception as e:
            if self.verbose:
                print(repr(e))
          else:
            self.pkgcount = len(self.records.fetchall())
            self.exec_db_command("insert into packageinfo values (%d, \"%s\", \"%s\", \"%s\", \"%s\", \"%s\")" % (self.pkgcount, self.pkg_params['name'], self.pkg_params['pkgDesc'], self.pkg_params['pkgType'], self.pkg_params['category'], "x86_64"));
       self.verbose = False
  
  @cmd2.with_category("Repository Management")
  @cmd2.with_argparser(add_package_parser)
  def do_view_packages(self,args):
        """Displays all of the registered packages from the repo manifest"""
        with self.db:
            try:
                self.records = self.db.execute("select * from packageinfo")
            except Exception as e:
                print(repr(e))
            else:
                print("================================")
                count = 0
                for rec in self.records.fetchall():
                    print("Name: %s " % rec[1])
                    print("Description: %s" % rec[2])
                    print("Type: %s" % rec[3])
                    print("Category: %s" % rec[4])
                    if count < len(self.records.fetchall()):
                        print("------------------------------")
                print("================================")
  

  def exec_db_command(self,command):
        with self.db:
            try:
                self.db.execute(command)
            except Exception as e:
                if self.verbose:
                  print(repr(e))
                return False
            else:
                return True

if __name__== "__main__":
  import sys
  co = CaravelOperator()
  sys.exit(co.cmdloop())         
    


